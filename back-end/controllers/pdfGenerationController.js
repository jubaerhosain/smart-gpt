import { Leap } from '@leap-ai/sdk'
import dotenv from 'dotenv';
import { getGPTInstructions } from '../utils/promptData.js';
import { getTextFromGpt } from '../utils/getGPTtextToTextResponse.js';
import createPDFBook from '../utils/createPDFBook.js';
import Book from '../models/book.js';
// import { bookInfo, imageInfo } from '../utils/tempData.js';


dotenv.config();

const leap = new Leap(process.env.LEAP_API_KEY);

export const createPdf = async(req, res) => {

	const prompt = req.body.prompt;
    const gptInstructions = getGPTInstructions(prompt);
    console.log("gptInstructions",gptInstructions);

    let bookText = await getTextFromGpt(gptInstructions);
    console.log("bookText",bookText);
    let bookInfo = {}
    if(!isJSON(bookText)){
        bookText = bookText.replace(/\n/g, '');
        bookInfo = JSON.parse(bookText);
    }
    else bookInfo = JSON.parse(bookText);
    console.log("bookInfo: generated by GPT",bookInfo);

    const images = await createImagesWithParagraph(bookInfo.paragraphs);
    //const images = await createImagesWithParagraph(bookInfo.paragraphs);
    console.log("images: generated by GPT",images);
    const bookInfo2 = {
        title: bookInfo.title,
        summary: bookInfo.summary,
        paragraphs: images
    }
    const pdfLink = await createPDFBook(bookInfo2);
    const book = new Book({
      title: bookInfo2.title,
      summary: bookInfo.summary,
      bookUrl: `http://localhost:4002/${pdfLink}`
    })
    book.save();
    console.log(pdfLink);
    res.send(`http://localhost:4002/${pdfLink}`);
}


const isJSON = (str) =>{
    try {
      JSON.parse(str);
      return true;
    } catch (error) {
      return false;
    }
}

const createImagesWithParagraph = async(paragraphs) => {
    let bookImageParagraph = [];
    // console.log(paragraphs);
    for (let i = 0; i < paragraphs.length; i++) {
      try {
        //console.log(paragraphs[i].paragraph);
        leap.usePublicModel("sd-1.5");
        const imageInfo = await leap.generate.generateImage({ prompt: paragraphs[i].paragraph });
        const imageUrl = imageInfo.data.images[0].uri;
        bookImageParagraph.push({ imgUrl: imageUrl, paragraphTitle: paragraphs[i].paragraphTitle, paragraph: paragraphs[i].paragraph });
      } catch (error) {
        return error;
      }
    }
  
    return bookImageParagraph;
  };
